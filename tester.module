<?php

/**
 * @file
 * Provides testing functionality.
 */

use Drupal\Component\Uuid\Php;
use Drupal\Core\Asset\AttachedAssets;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Database\Database;
use Drupal\Core\File\Exception\FileException;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StreamWrapper\PublicStream;
use Drupal\Core\Test\JUnitConverter;
use Drupal\Core\Test\TestDatabase;
use Drupal\Core\Url;
use Drupal\tester\Form\TesterResultsForm;
use Drupal\tester\PhpUnitTestRunner;
use Drupal\tester\TestRunResultsStorage;
use Drupal\tester\TestDiscovery;
use Drupal\tester\TestRun;
use PHPUnit\Framework\TestCase;

/**
 * Implements hook_help().
 */
function tester_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.tester':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Testing module provides a framework for running automated tests. It can be used to verify a working state of Drupal before and after any code changes, or as a means for developers to write and execute tests for their modules. For more information, see the <a href=":tester">online documentation for the Testing module</a>.', [':tester' => 'https://www.drupal.org/documentation/modules/tester']) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Running tests') . '</dt>';
      $output .= '<dd><p>' . t('Visit the <a href=":admin-tester">Testing page</a> to display a list of available tests. For comprehensive testing, select <em>all</em> tests, or individually select tests for more targeted testing. Note that it might take several minutes for all tests to complete.', [':admin-tester' => Url::fromRoute('tester.test_form')->toString()]) . '</p>';
      $output .= '<p>' . t('After the tests run, a message will be displayed next to each test group indicating whether tests within it passed, failed, or had exceptions. A pass means that the test returned the expected results, while fail means that it did not. An exception normally indicates an error outside of the test, such as a PHP warning or notice. If there were failures or exceptions, the results will be expanded to show details, and the tests that had failures or exceptions will be indicated in red or pink rows. You can then use these results to refine your code and tests, until all tests pass.') . '</p></dd>';
      $output .= '</dl>';
      return $output;

    case 'tester.test_form':
      $output = t('Select the test(s) or test group(s) you would like to run, and click <em>Run tests</em>.');
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function tester_theme() {
  return [
    'tester_result_summary' => [
      'variables' => [
        'label' => NULL,
        'result' => NULL,
        'items' => [],
        'pass' => 0,
        'warn' => 0,
        'fail' => 0,
        'error' => 0,
        'fatal' => 0,
        'debug' => 0
      ],
    ],
  ];
}

/**
 * Implements hook_js_alter().
 */
function tester_js_alter(&$javascript, AttachedAssetsInterface $assets) {
  // Since Tester is a special use case for the table select, stick the
  // Tester JavaScript above the table select.
  $tester = drupal_get_path('module', 'tester') . '/tester.js';
  if (array_key_exists($tester, $javascript) && array_key_exists('core/misc/tableselect.js', $javascript)) {
    $javascript[$tester]['weight'] = $javascript['core/misc/tableselect.js']['weight'] - 1;
  }
}

/**
 * Prepares variables for tester result summary templates.
 *
 * Default template: tester-result-summary.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - label: An optional label to be rendered before the results.
 *   - ok: The overall group result pass or fail.
 *   - pass: The number of passes.
 *   - fail: The number of fails.
 *   - exception: The number of exceptions.
 *   - debug: The number of debug messages.
 */
function template_preprocess_tester_result_summary(&$variables) {
  $variables['items'] = _tester_build_summary_line($variables);
}

/**
 * Formats each test result type pluralized summary.
 *
 * @param array $summary
 *   A summary of the test results.
 *
 * @return array
 *   The pluralized test summary items.
 */
function _tester_build_summary_line($summary) {
  $translation = \Drupal::translation();
  $items['pass'] = $translation->formatPlural($summary['pass'], '1 pass', '@count passes');
  $items['warn'] = $translation->formatPlural($summary['warn'], '1 warning', '@count warnings');
  $items['fail'] = $translation->formatPlural($summary['fail'], '1 fail', '@count fails');
  $items['error'] = $translation->formatPlural($summary['error'], '1 error', '@count errors');
  $items['fatal'] = $translation->formatPlural($summary['fatal'], '1 fatal', '@count fatals');
  if ($summary['debug']) {
    $items['debug'] = $translation->formatPlural($summary['debug'], '1 debug message', '@count debug messages');
  }
  $items['result'] = $summary['result'];
  return $items;
}

/**
 * @todo
 */
function tester_test_run_results_storage() {
  // Set up a SQLite connection for the test runner.
  $sqlite = DRUPAL_ROOT . '/sites/tester/test-results.sqlite';
  $databases['test-runner']['default'] = [
    'driver' => 'sqlite',
    'database' => $sqlite,
    'prefix' => [
      'default' => '',
    ],
  ];
  // Create the test runner SQLite database, unless it exists already.
  if (!file_exists($sqlite)) {
    touch($sqlite);
  }

  // Add the test runner database connection.
  Database::addConnectionInfo('test-runner', 'default', $databases['test-runner']['default']);

  // Create the Simpletest schema.
  $test_run_results_storage = new TestRunResultsStorage(Database::getConnection('default', 'test-runner'));
  $test_run_results_storage->buildTestingResultsEnvironment(TRUE);

  // Verify that the Simpletest database schema exists by checking one table.
  if (!$test_run_results_storage->validateTestingResultsEnvironment()) {
    throw new \RuntimeException('Missing Simpletest database schema. Either install Simpletest module or use the --sqlite parameter.');
  }

  return $test_run_results_storage;
}

/**
 * Implements callback_batch_operation().
 */
function _tester_batch_operation($test_id, $test_list_init, &$context) {
  $test_discovery = \Drupal::service('tester.test_discovery');
  $test_run_results_storage = tester_test_run_results_storage();

  // Get working values.
  if (!isset($context['sandbox']['max'])) {
    // First iteration: initialize working values.
    $test_list = $test_list_init;
    $context['sandbox']['max'] = count($test_list);
    $test_results = [
      '#pass' => 0,
      '#warn' => 0,
      '#fail' => 0,
      '#error' => 0,
      '#fatal' => 0,
      '#debug' => 0,
    ];
  }
  else {
    // Nth iteration: get the current values where we last stored them.
    $test_list = $context['sandbox']['tests'];
    $test_results = $context['sandbox']['test_results'];
  }
  $max = $context['sandbox']['max'];

  // Perform the next test.
  $test_class = array_shift($test_list);
  $test_info = $test_discovery->getTestClassInfo($test_class);
  $test_run = TestRun::get($test_run_results_storage, $test_id);
  $runner = PhpUnitTestRunner::create(\Drupal::getContainer());
  $phpunit_results = $runner->execute($test_run, $test_info['filename'], $test_class);
  $runner->processPhpUnitResults($test_run, $phpunit_results);
  $test_results[$test_class] = $runner->summarizeResults($phpunit_results)[$test_class];
  $size = count($test_list);

  // Gather results and compose the report.
  foreach ($test_results[$test_class] as $key => $value) {
    if ($key !== '#result') {
      $test_results[$key] += $value;
    }
  }
  $test_results[$test_class]['#name'] = $test_info['name'];
//dump($test_results);

  $items = [];
  foreach (Element::children($test_results) as $class) {
    $class_test_result = $test_results[$class] + [
      '#theme' => 'tester_result_summary',
      '#label' => t($test_results[$class]['#name'] . ':'),
      '#result' => $test_results[$class]['#result'],
    ];
//dump($phpunit_results, $test_results[$class]);
//    $class_test_result = t('@class: @result', [
//      '@class' => $test_results[$class]['#name'],
//      '@result' => $phpunit_results[0]['status'],
//    ]);
    array_unshift($items, \Drupal::service('renderer')->render($class_test_result));
//    array_unshift($items, $class_test_result);
  }
dump($items);

  $next_test_class = array_key_first($test_list);
  $next_test_info = $test_discovery->getTestClassInfo($next_test_class);
  $next_test_num = $max - $size + 1;
  if ($next_test_num <= $max) {
    $context['message'] = t('Processing test @num of @max - %test.', ['%test' => $next_test_info['name'], '@num' => $next_test_num, '@max' => $max]);
    $overall_results = $test_results + [
      '#theme' => 'tester_result_summary',
      '#label' => t('Overall results:'),
    ];
    $context['message'] .= \Drupal::service('renderer')->render($overall_results);

    $item_list = [
      '#theme' => 'item_list',
      '#items' => $items,
    ];
    $context['message'] .= \Drupal::service('renderer')->render($item_list);
  }
  else {
    $context['message'] = t('Preparing report...');
  }

  // Save working values for the next iteration.
  $context['sandbox']['tests'] = $test_list;
  $context['sandbox']['test_results'] = $test_results;
  // The test_id is the only thing we need to save for the report page.
  $context['results']['test_id'] = $test_run->id();

  // Multistep processing: report progress.
  $context['finished'] = 1 - $size / $max;
}

/**
 * Implements callback_batch_finished().
 */
function _tester_batch_finished($success, $results, $operations, $elapsed) {
  if ($success) {
    \Drupal::messenger()->addStatus(t('The test run finished in @elapsed.', ['@elapsed' => $elapsed]));
  }
  else {
    // Use the test_id passed as a parameter to _tester_batch_operation().
    $test_id = $operations[0][1][1];

    // Retrieve the last database prefix used for testing and the last test
    // class that was run from. Use the information to read the lgo file
    // in case any fatal errors caused the test to crash.
    $last_test = TestDatabase::lastTestGet($test_id);
    (new TestDatabase($last_test['last_prefix']))->logRead($test_id, $last_test['test_class']);

    \Drupal::messenger()->addError(t('The test run did not successfully finish.'));
    \Drupal::messenger()->addWarning(t('Use the <em>Clean environment</em> button to clean-up temporary files and tables.'));
  }
}
